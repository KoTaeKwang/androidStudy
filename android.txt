마시멜로 

툴 - > 안드로이드 스튜디오

안드로이드는 자바를 사용 

마시멜로 바뀐부분 - > blank activity : empty activity 로 바꼈어
 
안드로이드 - 구글 -> 오픈(오픈소스)을 통해 스마트폰 대중화 




안드로이드 특징 : 오픈소스 , 자바, 완벽한 컴포넌트가 제공됨 개발자는 앱만만들면되, 쉬운 앱 간 연동, 다양한 하드웨어 지원

 
안드로이드 OS : A -> B ->  . . . . . M(마시멜로 : 보안강화) 버전 6.0


안드로이드  프로요(2.2)의 주요 변화 
1. 플래시 지원( 현재 모바일에서는 플래시 지원 X (보안상의 이유))
2. SD 카드에 설치 지원  (SD 카드는 데이터를 저장 할 수 있는공간 저장을 하려면 권한이 필요 )
3. 백업 API 지원
4. 푸쉬 메시지 지원


진저브레드(2.3)의 주요 변화
1. NFC 지원
2. 전면 카메라 지원
3. 자이로스코프 센서 지원
4. 인터넷 전화 지원(SIP)

허니콤(3.0) 주요 변화 (스마트폰에서 적용 X 중간버전임 단지)
1. 태블릿UI
2. 화면 분할 지원
3. HTTP 라이브 스트리밍 지원

아이스크림(4.0) 주요 변화  (허니콤이 발전된거야)
1. 얼굴인식 음성인식 
2. Wifi 다이렉트(테더링이나 그런것들)
3. 홀로그래픽 UI와 버추얼 키 

젤리빈(4.2) 주요 변화
1. 그래픽 성능 향상
2. 확장 가능한 알림메시지(상태바에 알림메시지 그런걸 눌렀을때 어떻게하라 이런거)
3. 위젯과 네트워킹 기능 강화

킷캣(4.4) 주요변화
1. 프린팅 프레임워크
2. 저장공간 접근 프레임워크(데이터를 읽거나 쓰거나)
3. 배터리 소모가 적은 센서 

롤리팝(5.0)의 주요 변화
1. 새로운 디자인
2. 시스템과 그래픽 성능 향상
3. 강력해진 멀티미디어 기능
4. 업데이트 가능한 웹뷰


안드로이드가 빌드가 되면  apk 설치 파일이 만들어져
안드로이드 스튜디오 ->  빌드과정을 알아서 해줘  (.class, .dex, Resource processing) -> apk로 만듬


안드로이드 프로젝트 폴더

/java   :  자바 소스 파일이 들어있는 폴더 [/app/src/main] 폴더 안에 있음

/res : 화면을 구성할때 사용하는 xml 레이아웃, 그림파일, 문자열을 정의한 XML 파일등

/build : 개발환경이 자동으로 만들어내는 소스 파일이 들어가는 폴더

/assets : 이 폴더는 처음에 만들어져있지 않음,  동영상 파일이나 원본 파일을 저장하는 폴더

AndroidManifest.xml : 앱에대한 설정을 하는 것


안드로이드와 자바는 다르다. 다른 부분을 알아야해.
안드로이드는 자바와 화면 만드는 작업이 달라   안드로이드는 화면 구성하는 API 를 새로 만들었어(속도 때문에)

안드로이드 아키텍처는  리눅스 커널-> 라이브러리(ART Runtime : 이것때문에 자바로 만들 수 있어) -> 애플리케이션 프레임워크(버튼이나 그런거) -> 애플리케이션


안드로이드 스튜디오 -> 개발 도구
UI 뷰어 , 디버그 브리지(안드로이드 스튜디오와 에뮬레이터가 ADB를 통해 연결됨, 눈에 보이지 않음)
나인패치(이미지가 늘어났을때 어떤 부분은 늘어나고, 어떤 부분은 늘어나지 안헥 하는 것)
디버그 모니터 서비스(DDMS, 상단 툴바에 버튼있음, 로그나 그런것들을 확인 가능)


빌드 에러날때  -> 1. 작업 표시줄에 sync 아이콘 누른다.  그래도 안되면 2. clean project  그래도 안되면 3. build를 다 삭제하고 다시 build 한다.
만약 이미지 이런거 넣었을때 다시 빌드하고싶으면 sync 아이콘 넣어


이름에  대고 ctrl q 하면 설명이나와
파라미너 안에 뭐 넣을지 모를때  ctrl p 하면 다 나와


dp : 비율단위로 화면구성 

<Linear Layout>
gravity 속성 : 정렬 시켜주는거 (layout:gravity(ex) 버튼자체) , gravity( ex)버튼 안 글씨움직이는거) 가 있어)

layout_weight : 분할 시켜주는 속성




프레임레이아웃 : 한번에 하나의 뷰만 보여주며 다른 뷰들은 그 아래에 중첩되어 쌓임, 중첩되는 효과와 함께 뷰의 가시성(Visibility) 속성을 이용해 다양한 화면 구성이 가능

인플레이션 : XML 레이아웃에 정의된 내용이 메모리에 객체화 되는 과정


setContentView() -> 화변에 나타낼 뷰를 지정하는 역할, XML 레이아웃의 내용을 메모리 상에 객체화 하는 역할 
하지만  전체화면 중에 일부분만을 차지하는 화면구성요소들을 XML 레이아웃에서 로딩하여 보여줄수 없을까? ->LayoutInflator   이 클래스는 시스템 서비스로 제공돰


안드로이드 화면 : 자바소스 1개, XML레이아웃 1개 


안드로이드 애플리케이션 구성하는 요소 -  액티비티(화면), 서비스, 브로드캐스트 수신자, 내용 제공자 

인텐트  -> 위의 4가지 구성요소끼리 화면간 데이터(Extra) 이동,  인텐트는 액션정보와 데이터정보가 들어가 있다.   명시적 인텐트, 암시적 인텐트

화면을 등록하면 manifest 에 코딩해야해 


액티비티 스택 ->  액티비티가 뒤에 쌓이는거  ,  똑같은 액티비티가 쌓이면 하나만 하면 되니까  -> flag를 코딩해야해 


수명주기 -> 실행(화면 상에 액티비티가 보이면서 실행되어 있는 상태) , 일시중지(사용자에게 보이기는 하지만 다른 액티비티가 위에 있어 포커스를 받지 못하는 상태, 대화상자가 위에 있어 일부가 가려져 있는 경우에 해당), 중지(다른 액티비티에 의해 완전히 가려져 보이지 않는 상태)
            새로운 액티비티 -> 실행    ->      일시정지 -> 중지 -> 소멸
                                   (onPause)
        	                       <-
				    (onResume)



서비스 : 화면 없는 백그라운드에서 실행되는 애플리케이션 구성 요소 , 메니패스트 파일 안에 <service> 태그를 이용하여 선언한다. , 메소드를 이용해 서비스를 시작, 중지할 수 있다.
           oncreate , onstartcommand, ondestroy의 수명주기가 있다.    onstartcommand 에서  intent 데이터 값들을 받는다.


브로드캐스트 수신자 : 브로드캐스팅 되는걸 받는거 (  ex)  SMS 같은걸 받는 거)  sms 는 단말이 먼저받아 브로드캐스트가 맞는 앱으로 보내줘  형식을 짜서 보내는데 이게 Intent  그래서 우리가 어떤형식으로 된 Intent를 받겠다고 선언해야해 
			  <intent-filter>  ->이런 방식의 Intent 만 받겠다.
               			 <action android:name="android.provider.Telephony.SMS_RECEIVED"/>
          		  </intent-filter>


프래그먼트 : 화면의 일정 영역을 독립적으로 처리하기 위해 만들어진 특별한 화면 구성 요소, 부분화면을 구성하기 위해! , 한 프래그먼트가 엑티비티에 요청하고 엑티비티가 프래그먼트 부른다. 프래그먼트는 인텐트를쓸수없어 , 대신 메소드를 활용


에니메이션 폴더 만들때 res하위로 anim 폴더넣어

뷰페이저 : 저절로 에니메이션이 포함되어있어서   넘기면 넘어감